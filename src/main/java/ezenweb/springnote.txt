    // JPA
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // MY SQL
        runtimeOnly 'com.mysql:mysql-connector-j'

    ================================ 필수 연동 ================================
        application.properties 파일에서 연동
        # JDBC 연동
        # 1. 해당 JDBC 클래스 호출
        spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
        # 2. 해당 JDBC 클래스 이용한 접속할 DB 서버 경로 설정
        spring.datasource.url=jdbc:mysql://localhost:3306/springweb2
        # 3. DB서버의 아이디와 비밀번호
        spring.datasource.username=root
        spring.datasource.password=1234

        # 4. JPA DDL ( create, drop, alter ) DML ( select, insert, delete, update )
            # 1. 서버가 켜질 때 DDL 생성 여부
        spring.jpa.hibernate.ddl-auto=create
    ==========================================================================

    JSX
        JS의 확장문법
        JS + HTML/XML 결합
            JSP : JAVA + HTML 결합
            MUSTACHE : JAVA(Spring model) + HTML 결합
    장점
        코드가 간결해진다
        가독성이 향상된다

    JPA : Java Persistence API
        Persistence (영속성 : 프로그램이 종료되어도 사라지지 않는 데이터의 특성)
        JAVA [ JVM : 휘발성(비영속성) ]
        서버와 데이터베이스 사이
            Entity : 자바 객체를 DB가 이해할 수 있게 만든 것으로 이를 기반으로 테이블이 만들어진다.
            Repository : 엔티티가 DB 속 테이블에 저장 및 관리(조작) 할 수 있도록 하는 인터페이스입니다.
                ( 인터페이스 : 서로 다른 객체들 간의 동일한 기능을 수행하게 조작하는 하나의 기능 묶음 )
    JPA Entity 생성 방법
        1. 클래스 파일을 생성한다.
        2. @Entity 설정
        3. PK 필드는 필수 1개 이상 @Id
    Repository 생성 방법
        1. 인터페이스 파일을 생성한다.
        2. extends JpaRepository 상속받기
            JpaRepository<조작할엔티티, PK 자료형>
    리포지토리 객체 이용한 엔티티 조작
        1. [C] .save(저장할엔티티)
            - 영속된 상태 ( 레코드 저장된 결과, 매핑된 상태 )
        2. [R] .findAll()
            - 영속된 상태 ( 레코드 저장된 결과, 매핑된 상태 )
        3. [U] .findById(호출할PK).get();
            - 영속된 상태 ( 레코드 저장된 결과, 매핑된 상태 )
        4. [D] .delete(삭제할엔티티) 또는 .deleteByID(삭제할PK번호)
            - 영속 삭제 ( 레코드에서 제거된 상태, 매핑 제거 )

    ORM (Object Relational Mapping)
        개발언어와 데이터베이스 연결 시 SQL 언어가 아닌 개발언어로 접근 할 수 있도록 해주는 툴

    JPA 관련 어노테이션
        @Entity : 해당 클래스를 엔티티로 사용 명시
            ORM : 객체와 데이터베이스 개체와 연동/연결/매핑 해주는 기법
        @Id : primary key 명시
            JPA : 사용 시 1개 이상 무조건 필수
        @Table(name="테이블명") : 해당 엔티티 테이블 이름 정의
            생략 시 해당 클래스명으로 테이블명이 생성
        @GeneratedValue(strategy = GenerationType.IDENTITY) : auto_increment

        @Column : 필드
            @Column(columnDefinition="DB 자료형")
                DB 자료형 정의
            @Column(name="필드명")
                생략 시 자바 필드명
            @Column(length=허용범위자료크기)
                생략 시 최대 허용범위
            @Column(nullable=Null 여부)
                생략 시 Number 타입, char 타입은 not null
                false : not null
            @Column(unique=중복 여부)
                생략 시 false
                true : unique
    6. 자료형
        자바          MYSQL
        int         int
        String      varchar
        boolean     bit(0,1)
        byte        tinyint
        short       smallint
        char        char(1)
        float       float( )
        double      float( )
        long        bigint
        X           longtext
        Date        datetime

    JPA 연관관계

        Entity --> DTO Select ( MVC 패턴에서 Entity 사용하는 구역이 Service인 비즈니스 로직에서 만 허용 )
            Entity 클래스에 toDto()
                toDto 변환에 사용하는 경우에 따라 생성해서 사용
                경우의 수가 많아지면 복잡도 올라감 --> Map<Object, Object>
                Rest API (문자통신) 이용한 외부로 데이터 전송 시

    HTTP 이동 문자 전송 규약 (프로토콜)

    WS (Web Socket)
        WS 프로토콜을 기반으로 클라이언트와 서버 사이의 지속적인 양방향 연결
        사용처 : 실시간처리, 채팅, 보안, 알림 등등

        * 지속적인 양방향 연결
            소켓 : 통신의 종착점 (통신이 도착해야 하는 곳 / 엔드포인트)
            클라이언트 소켓이 서버 소켓으로부터 연결 요청

            클라이언트                       서버
            1. Socket                       1. Socket
                                            2. Bind        * 서버 소켓 등록
            3. Connect                      4. Accept      * 클라이언트 요청 수용
            5. Write                        6. Read
            5. Read                         6. Write
            7. Close                        7. Close

        구현
            1. (클라이언트) JS
                생성  new WebSocket(서버 소켓 URL)
                    클라이언트 소켓이 생성되면서 서버소켓에게 접속 요청
                웹 소켓 객체의 이벤트 함수들의 콜백함수 정의
                    onopen onmessage onerror onclose
                서버에게 메시지 전송
                    send

            2. (서버) JAVA/SPRING
                웹 소켓 라이브러리 설치 implementation 'org.springframework.boot:spring-boot-starter-websocket'

                서버 소켓의 핸들러 객체 생성
                    1. 해당 클래스 생성
                    2. 해당 클레스에 @Configuration @EnableWebSocket 주입
                    3. 해당 클래스에 implements WebSocketConfigurer
                    4. registerWebSocketHandlers 메소드 오버라이드(재정의)
                    5. 재정의 registry.addHandler(서버객체, "/URL")

                서버 소켓
                    1. 클래스 생성
                    2. 해당 클래스에 @Component 주입
                    3. 해당 클래스에 extends TextWebSocketHandler or implements WebSocketHandler
                    4. 메소드 재정의
                        클라이언트 소켓이 접속이 성공적일 때
                        afterConnectionEstablished(WebSocketSession session) throws Exception

    Spring Security
        인증, 인가 관련 아키텍쳐/기능 제공
            인가 : 특정 리소스에 접근하기 위한 권한이 맞는지 확인 예) 여권 발급
            인증 : 특정 리소스에 접근하기 위한 발급된 권한 확인
            권한 : 특정 리소스에 접근하기 위한 권리가  주어짐

        대표 기능
            1.로그인 2.로그아웃 3.소셜로그인 4.csrf(body사용금지)방지 5.토큰(징표/인증권한상태)
            로그인/로그아웃 컨트롤러 구현했다면 코드 제거 (시큐리티에서 지원)

            허가(Authorization)
            토큰(증표/인증결과 정보)
            승인(Authorize)
            인증이 된 상태(Authenticated)

        실행
            implementation 'org.springframework.boot:spring-boot-starter-security'
            Username : user
            UserPassword : Using generated security password

            SecurityConfig 클래스 선언
            SecurityFilterChain 반환 타입으로 매개변수 HttpSecurity 함수 정의
            http.authorizeHttpRequests( (매개변수)->{
                매개변수.requestMatchers(AntPathRequestMatcher.antMatcher("/PATH").권한제한 함수
            }
            권한 제한 함수
                permitAll() 권한이 없어도 모두 사용
                authenticated() 권한이 있으면 허용
                hasAnyRole("ROLE명","ROLE명") 권한이 있으면서 특정 ROLE 여러개 허용
                hasRole("ROLE명") 권한이 있으면서 특정 ROLE 하나만 허용

            로그인 커스텀
